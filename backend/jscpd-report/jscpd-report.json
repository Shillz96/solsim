{
  "statistics": {
    "detectionDate": "2025-10-27T16:30:09.686Z",
    "formats": {
      "typescript": {
        "sources": {
          "src/ws/server.ts": {
            "lines": 195,
            "tokens": 1670,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/ws/pnl.ts": {
            "lines": 95,
            "tokens": 828,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/workers/marketLighthouseWorker.ts": {
            "lines": 228,
            "tokens": 1975,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/test-deposit-address.ts": {
            "lines": 37,
            "tokens": 353,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/sentry.ts": {
            "lines": 78,
            "tokens": 699,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/requestCoalescer.ts": {
            "lines": 186,
            "tokens": 1425,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/pnl.ts": {
            "lines": 343,
            "tokens": 2590,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/password-validator.ts": {
            "lines": 44,
            "tokens": 252,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/mark-calculator.ts": {
            "lines": 64,
            "tokens": 483,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/margin.ts": {
            "lines": 202,
            "tokens": 1069,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/logger.ts": {
            "lines": 103,
            "tokens": 1029,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/json.ts": {
            "lines": 57,
            "tokens": 185,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/formatter.ts": {
            "lines": 70,
            "tokens": 644,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/fifo-closer.ts": {
            "lines": 101,
            "tokens": 840,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/fetch.ts": {
            "lines": 109,
            "tokens": 962,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/env.ts": {
            "lines": 144,
            "tokens": 1319,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/depositAddressGenerator.ts": {
            "lines": 118,
            "tokens": 618,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/decimal-helpers.ts": {
            "lines": 133,
            "tokens": 741,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/cleanupWalletActivities.ts": {
            "lines": 101,
            "tokens": 753,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/chatSanitizer.ts": {
            "lines": 119,
            "tokens": 738,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/chatRateLimiter.ts": {
            "lines": 150,
            "tokens": 1262,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/types/fastify.d.ts": {
            "lines": 27,
            "tokens": 143,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/withdrawalService.ts": {
            "lines": 351,
            "tokens": 2491,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/walletTrackerService.ts": {
            "lines": 239,
            "tokens": 2171,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/walletTrackerService-pumpportal.ts": {
            "lines": 307,
            "tokens": 2804,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/walletService.ts": {
            "lines": 35,
            "tokens": 375,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/walletManagementService.ts": {
            "lines": 447,
            "tokens": 3592,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/walletEncryptionService.ts": {
            "lines": 151,
            "tokens": 1165,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/walletActivityService.ts": {
            "lines": 868,
            "tokens": 8409,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/trendingService.ts": {
            "lines": 517,
            "tokens": 4622,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/tradeService.ts": {
            "lines": 374,
            "tokens": 3226,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/tradeCommon.ts": {
            "lines": 486,
            "tokens": 2736,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/tokenService.ts": {
            "lines": 586,
            "tokens": 5297,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 58,
            "duplicatedTokens": 532,
            "percentage": 9.9,
            "percentageTokens": 10.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/tokenMetadataService.ts": {
            "lines": 257,
            "tokens": 2020,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/stocksService.ts": {
            "lines": 187,
            "tokens": 2629,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/rewardService.ts": {
            "lines": 271,
            "tokens": 2411,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/realTradeService.ts": {
            "lines": 629,
            "tokens": 5027,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 210,
            "duplicatedTokens": 1574,
            "percentage": 33.39,
            "percentageTokens": 31.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/realtimePnLService.ts": {
            "lines": 486,
            "tokens": 4286,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/raydiumStreamService.ts": {
            "lines": 295,
            "tokens": 2466,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/purchaseService.ts": {
            "lines": 142,
            "tokens": 1327,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/pumpPortalStreamService.ts": {
            "lines": 644,
            "tokens": 5119,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 167,
            "percentage": 2.48,
            "percentageTokens": 3.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/pumpPortalLocalService.ts": {
            "lines": 240,
            "tokens": 1853,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 31,
            "duplicatedTokens": 322,
            "percentage": 12.92,
            "percentageTokens": 17.38,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/pumpPortalLightningService.ts": {
            "lines": 282,
            "tokens": 2211,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 31,
            "duplicatedTokens": 322,
            "percentage": 10.99,
            "percentageTokens": 14.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/pumpPortalApi.ts": {
            "lines": 399,
            "tokens": 3338,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/portfolioService.ts": {
            "lines": 541,
            "tokens": 5045,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/perpTradeService.ts": {
            "lines": 378,
            "tokens": 3326,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/notificationService.ts": {
            "lines": 691,
            "tokens": 5382,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/moderationService.ts": {
            "lines": 278,
            "tokens": 1721,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/moderationBot.ts": {
            "lines": 482,
            "tokens": 3588,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/migrationService.ts": {
            "lines": 217,
            "tokens": 2154,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 101,
            "duplicatedTokens": 959,
            "percentage": 46.54,
            "percentageTokens": 44.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/marketSentimentService.ts": {
            "lines": 68,
            "tokens": 344,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/liquidationEngine.ts": {
            "lines": 275,
            "tokens": 2257,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/leaderboardService.ts": {
            "lines": 182,
            "tokens": 1597,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/holderCountService.ts": {
            "lines": 166,
            "tokens": 1472,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/heliusTradeStreamService.ts": {
            "lines": 479,
            "tokens": 4252,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/heliusapi.ts": {
            "lines": 448,
            "tokens": 4661,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/healthCapsuleService.ts": {
            "lines": 266,
            "tokens": 2414,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/geckoTerminalService.ts": {
            "lines": 314,
            "tokens": 2559,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/emailService.ts": {
            "lines": 400,
            "tokens": 1615,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/depositService.ts": {
            "lines": 335,
            "tokens": 2393,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/cmcService.ts": {
            "lines": 272,
            "tokens": 2289,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/chatService.ts": {
            "lines": 454,
            "tokens": 4348,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/badgeService.ts": {
            "lines": 367,
            "tokens": 2903,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/adminService.ts": {
            "lines": 542,
            "tokens": 4748,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/scripts/triggerRebuild.ts": {
            "lines": 31,
            "tokens": 350,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/scripts/testCalculations.ts": {
            "lines": 209,
            "tokens": 2357,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/scripts/rebuildPositions.ts": {
            "lines": 185,
            "tokens": 1777,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 101,
            "duplicatedTokens": 959,
            "percentage": 54.59,
            "percentageTokens": 53.97,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/scripts/create-performance-indexes.ts": {
            "lines": 77,
            "tokens": 745,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/scripts/checkPortfolio.ts": {
            "lines": 145,
            "tokens": 1551,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/scripts/backfill-token-metadata.ts": {
            "lines": 171,
            "tokens": 1546,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/webhooks.ts": {
            "lines": 230,
            "tokens": 1848,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/warpPipes.ts": {
            "lines": 741,
            "tokens": 7180,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/walletTrackerV2.ts": {
            "lines": 389,
            "tokens": 3963,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 18,
            "duplicatedTokens": 227,
            "percentage": 4.63,
            "percentageTokens": 5.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/walletTrackerSettings.ts": {
            "lines": 196,
            "tokens": 2163,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 40,
            "duplicatedTokens": 528,
            "percentage": 20.41,
            "percentageTokens": 24.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/walletTrackerExample.ts": {
            "lines": 396,
            "tokens": 3440,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/walletTracker.ts": {
            "lines": 254,
            "tokens": 2311,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/wallet.ts": {
            "lines": 618,
            "tokens": 5531,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/userProfile.ts": {
            "lines": 313,
            "tokens": 2685,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/trending.ts": {
            "lines": 14,
            "tokens": 169,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/trades.ts": {
            "lines": 194,
            "tokens": 1963,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 54,
            "duplicatedTokens": 564,
            "percentage": 27.84,
            "percentageTokens": 28.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/trade.ts": {
            "lines": 182,
            "tokens": 1899,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 41,
            "duplicatedTokens": 347,
            "percentage": 22.53,
            "percentageTokens": 18.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/stocks.ts": {
            "lines": 13,
            "tokens": 149,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/sentry-test.ts": {
            "lines": 53,
            "tokens": 472,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/search.ts": {
            "lines": 364,
            "tokens": 4210,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/rewards.ts": {
            "lines": 507,
            "tokens": 4144,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/realTrade.ts": {
            "lines": 408,
            "tokens": 3345,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 41,
            "duplicatedTokens": 347,
            "percentage": 10.05,
            "percentageTokens": 10.37,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/purchase.ts": {
            "lines": 228,
            "tokens": 2146,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/pumpPortalData.ts": {
            "lines": 329,
            "tokens": 2860,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 167,
            "percentage": 4.86,
            "percentageTokens": 5.84,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/portfolio.ts": {
            "lines": 145,
            "tokens": 1594,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/perpRoutes.ts": {
            "lines": 213,
            "tokens": 2071,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/notifications.ts": {
            "lines": 216,
            "tokens": 1813,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 52,
            "duplicatedTokens": 482,
            "percentage": 24.07,
            "percentageTokens": 26.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/moderationConfig.ts": {
            "lines": 336,
            "tokens": 2749,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/moderation.ts": {
            "lines": 501,
            "tokens": 4624,
            "sources": 1,
            "clones": 12,
            "duplicatedLines": 268,
            "duplicatedTokens": 2606,
            "percentage": 53.49,
            "percentageTokens": 56.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/market.ts": {
            "lines": 236,
            "tokens": 2285,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/leaderboard.ts": {
            "lines": 19,
            "tokens": 222,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/debug.ts": {
            "lines": 70,
            "tokens": 638,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/chat.ts": {
            "lines": 324,
            "tokens": 2876,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/chart.ts": {
            "lines": 250,
            "tokens": 2153,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/badges.ts": {
            "lines": 216,
            "tokens": 2319,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/admin.ts": {
            "lines": 544,
            "tokens": 4777,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/plugins/wsWalletTracker.ts": {
            "lines": 315,
            "tokens": 2975,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 18,
            "duplicatedTokens": 227,
            "percentage": 5.71,
            "percentageTokens": 7.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/plugins/wsTest.ts": {
            "lines": 25,
            "tokens": 238,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/plugins/wsChat.ts": {
            "lines": 359,
            "tokens": 2940,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/plugins/ws.ts": {
            "lines": 354,
            "tokens": 3321,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/plugins/validationSchemas.ts": {
            "lines": 137,
            "tokens": 899,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/plugins/validation.ts": {
            "lines": 457,
            "tokens": 4037,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/plugins/requestTracking.ts": {
            "lines": 197,
            "tokens": 2004,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/plugins/redlock.ts": {
            "lines": 25,
            "tokens": 171,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/plugins/redis.ts": {
            "lines": 71,
            "tokens": 597,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/plugins/rateLimiting.ts": {
            "lines": 271,
            "tokens": 2677,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/plugins/pumpPortalWs.ts": {
            "lines": 381,
            "tokens": 2800,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/plugins/productionRateLimiting.ts": {
            "lines": 257,
            "tokens": 2437,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/plugins/prisma.ts": {
            "lines": 104,
            "tokens": 835,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/plugins/priceServiceClient.ts": {
            "lines": 230,
            "tokens": 1811,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/plugins/nonce.ts": {
            "lines": 216,
            "tokens": 2006,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/plugins/health.ts": {
            "lines": 296,
            "tokens": 2814,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 286,
            "percentage": 10.14,
            "percentageTokens": 10.16,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/plugins/auth.ts": {
            "lines": 238,
            "tokens": 2212,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/config/perpWhitelist.ts": {
            "lines": 33,
            "tokens": 185,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/config/moderationConfig.ts": {
            "lines": 250,
            "tokens": 1751,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/worker.ts": {
            "lines": 247,
            "tokens": 2068,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/index.ts": {
            "lines": 429,
            "tokens": 3346,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 32261,
          "tokens": 278270,
          "sources": 121,
          "clones": 22,
          "duplicatedLines": 563,
          "duplicatedTokens": 5308,
          "percentage": 1.75,
          "percentageTokens": 1.91,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "markdown": {
        "sources": {
          "src/workers/README.md": {
            "lines": 301,
            "tokens": 2430,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/WARP_PIPES_API.md": {
            "lines": 502,
            "tokens": 2617,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 803,
          "tokens": 5047,
          "sources": 2,
          "clones": 0,
          "duplicatedLines": 0,
          "duplicatedTokens": 0,
          "percentage": 0,
          "percentageTokens": 0,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "sql": {
        "sources": {
          "src/scripts/performance-indexes.sql": {
            "lines": 46,
            "tokens": 369,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 46,
          "tokens": 369,
          "sources": 1,
          "clones": 0,
          "duplicatedLines": 0,
          "duplicatedTokens": 0,
          "percentage": 0,
          "percentageTokens": 0,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      }
    },
    "total": {
      "lines": 33110,
      "tokens": 283686,
      "sources": 124,
      "clones": 22,
      "duplicatedLines": 563,
      "duplicatedTokens": 5308,
      "percentage": 1.7,
      "percentageTokens": 1.87,
      "newDuplicatedLines": 0,
      "newClones": 0
    }
  },
  "duplicates": [
    {
      "format": "typescript",
      "lines": 30,
      "fragment": "if (jupiterToken) {\n      token = await prisma.token.upsert({\n        where: { address: mint },\n        update: {\n          symbol: jupiterToken.symbol || null,\n          name: jupiterToken.name || null,\n          logoURI: jupiterToken.logoURI || null,\n          lastUpdated: new Date()\n        },\n        create: {\n          address: mint,\n          symbol: jupiterToken.symbol || null,\n          name: jupiterToken.name || null,\n          logoURI: jupiterToken.logoURI || null,\n        }\n      });\n\n      // Cache in Redis with version key\n      try {\n        await redis.setex(`token:meta:${REDIS_TOKEN_META_VERSION}:${mint}`, REDIS_TOKEN_META_TTL, safeStringify(token));\n      } catch (error) {\n        console.warn(`Failed to cache token metadata in Redis:`, error);\n      }\n\n      return token;\n    }\n  } catch (e: any) {\n    // Only log non-DNS errors to reduce noise\n    if (e.code !== 'ENOTFOUND') {\n      console.warn(`Jupiter all list failed (",
      "tokens": 0,
      "firstFile": {
        "name": "src\\services\\tokenService.ts",
        "start": 130,
        "end": 159,
        "startLoc": {
          "line": 130,
          "column": 5,
          "position": 1066
        },
        "endLoc": {
          "line": 159,
          "column": 27,
          "position": 1332
        }
      },
      "secondFile": {
        "name": "src\\services\\tokenService.ts",
        "start": 93,
        "end": 122,
        "startLoc": {
          "line": 93,
          "column": 5,
          "position": 744
        },
        "endLoc": {
          "line": 122,
          "column": 30,
          "position": 1010
        }
      }
    },
    {
      "format": "typescript",
      "lines": 68,
      "fragment": "// Record the trade in database using shared FIFO logic\n  const result = await prisma.$transaction(async (tx) => {\n    // Create trade record\n    const trade = await tx.trade.create({\n      data: {\n        userId: params.userId,\n        tokenAddress: params.mint,\n        mint: params.mint,\n        side: params.side,\n        action: params.side.toLowerCase(),\n        quantity: q,\n        price: priceUsd,\n        priceSOLPerToken: priceSol,\n        grossSol,\n        feesSol: pumpPortalFee,\n        netSol,\n        totalCost: tradeCostSol,\n        costUsd: tradeCostUsd,\n        solUsdAtFill,\n        marketCapUsd: mcAtFill,\n        route: \"PumpPortal\",\n        tradeMode: \"REAL\",\n        realTxSignature: txSignature,\n        realTxStatus: txStatus,\n        fundingSource: params.fundingSource,\n        pumpPortalFee: pumpPortalFee\n      }\n    });\n\n    // Fetch/initialize position with REAL trade mode\n    let pos = await tx.position.findUnique({\n      where: {\n        userId_mint_tradeMode: {\n          userId: params.userId,\n          mint: params.mint,\n          tradeMode: \"REAL\"\n        }\n      }\n    });\n\n    if (!pos) {\n      pos = await tx.position.create({\n        data: {\n          userId: params.userId,\n          mint: params.mint,\n          qty: D(0),\n          costBasis: D(0),\n          tradeMode: \"REAL\"\n        }\n      });\n    }\n\n    let realizedPnL = D(0);\n\n    if (params.side === \"BUY\") {\n      // Create FIFO lot using shared function\n      await createFIFOLot(tx, pos.id, params.userId, params.mint, q, priceUsd, priceSol, solUsdAtFill, \"REAL\");\n\n      // Update position using shared function\n      pos = await updatePositionBuy(\n        tx, params.userId, params.mint,\n        pos.qty as Decimal,\n        pos.costBasis as Decimal,\n        q, priceUsd,\n        \"REAL\"\n      );\n\n      // NOTE: Do NOT update realSolBalance for WALLET funding - funds come from user's wallet",
      "tokens": 0,
      "firstFile": {
        "name": "src\\services\\realTradeService.ts",
        "start": 443,
        "end": 510,
        "startLoc": {
          "line": 443,
          "column": 3,
          "position": 3578
        },
        "endLoc": {
          "line": 510,
          "column": 89,
          "position": 4081
        }
      },
      "secondFile": {
        "name": "src\\services\\realTradeService.ts",
        "start": 180,
        "end": 247,
        "startLoc": {
          "line": 180,
          "column": 3,
          "position": 1435
        },
        "endLoc": {
          "line": 247,
          "column": 49,
          "position": 1938
        }
      }
    },
    {
      "format": "typescript",
      "lines": 39,
      "fragment": "} else {\n      // Execute FIFO sell using shared function\n      const lots = await tx.positionLot.findMany({\n        where: {\n          userId: params.userId,\n          mint: params.mint,\n          tradeMode: \"REAL\",\n          qtyRemaining: { gt: 0 }\n        },\n        orderBy: { createdAt: \"asc\" }\n      });\n\n      const fifoResult = await executeFIFOSell(tx, params.userId, params.mint, q, priceUsd, \"REAL\");\n      realizedPnL = fifoResult.realizedPnL;\n\n      // Update position using shared function\n      pos = await updatePositionSell(\n        tx, params.userId, params.mint,\n        pos.qty as Decimal,\n        pos.costBasis as Decimal,\n        q,\n        fifoResult.consumed,\n        lots,\n        \"REAL\"\n      );\n\n      // Record realized PnL\n      await tx.realizedPnL.create({\n        data: {\n          userId: params.userId,\n          mint: params.mint,\n          pnl: realizedPnL,\n          pnlUsd: realizedPnL,\n          tradeMode: \"REAL\",\n          tradeId: trade.id\n        }\n      });\n\n      // NOTE: Do NOT update realSolBalance for WALLET funding - funds go to user's wallet",
      "tokens": 0,
      "firstFile": {
        "name": "src\\services\\realTradeService.ts",
        "start": 512,
        "end": 550,
        "startLoc": {
          "line": 512,
          "column": 5,
          "position": 4085
        },
        "endLoc": {
          "line": 550,
          "column": 85,
          "position": 4369
        }
      },
      "secondFile": {
        "name": "src\\services\\realTradeService.ts",
        "start": 254,
        "end": 292,
        "startLoc": {
          "line": 254,
          "column": 5,
          "position": 2011
        },
        "endLoc": {
          "line": 292,
          "column": 44,
          "position": 2295
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "if (!params.mint || params.mint.length < 32) {\r\n    throw new Error(\"Invalid mint address\");\r\n  }\r\n\r\n  if (params.amount <= 0) {\r\n    throw new Error(\"Amount must be greater than 0\");\r\n  }\r\n\r\n  if (params.slippage < 0 || params.slippage > 100) {\r\n    throw new Error(\"Slippage must be between 0 and 100\");\r\n  }\r\n\r\n  logger.info({\r\n    action: params.action,\r\n    mint: params.mint.slice(0, 8),\r\n    amount",
      "tokens": 0,
      "firstFile": {
        "name": "src\\services\\pumpPortalLightningService.ts",
        "start": 59,
        "end": 74,
        "startLoc": {
          "line": 59,
          "column": 3,
          "position": 376
        },
        "endLoc": {
          "line": 74,
          "column": 7,
          "position": 533
        }
      },
      "secondFile": {
        "name": "src\\services\\pumpPortalLocalService.ts",
        "start": 63,
        "end": 78,
        "startLoc": {
          "line": 63,
          "column": 3,
          "position": 415
        },
        "endLoc": {
          "line": 78,
          "column": 10,
          "position": 572
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "action: params.action,\r\n        mint: params.mint,\r\n        amount: params.amount,\r\n        denominatedInSol: params.denominatedInSol.toString(),\r\n        slippage: params.slippage,\r\n        priorityFee: params.priorityFee,\r\n        pool: params.pool || \"auto\",\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      logger.error({\r\n        status: response.status,\r\n        error: errorText,\r\n        mint: params.mint.slice(0, 8)\r\n      }",
      "tokens": 0,
      "firstFile": {
        "name": "src\\services\\pumpPortalLightningService.ts",
        "start": 86,
        "end": 102,
        "startLoc": {
          "line": 86,
          "column": 9,
          "position": 647
        },
        "endLoc": {
          "line": 102,
          "column": 2,
          "position": 812
        }
      },
      "secondFile": {
        "name": "src\\services\\pumpPortalLocalService.ts",
        "start": 92,
        "end": 107,
        "startLoc": {
          "line": 92,
          "column": 9,
          "position": 714
        },
        "endLoc": {
          "line": 107,
          "column": 2,
          "position": 876
        }
      }
    },
    {
      "format": "typescript",
      "lines": 51,
      "fragment": "(`     ${tokenTrades.length} trades to process`);\r\n\r\n      // Delete existing position and lots for this token\r\n      await prisma.positionLot.deleteMany({\r\n        where: { userId: user.id, mint }\r\n      });\r\n\r\n      await prisma.position.deleteMany({\r\n        where: { userId: user.id, mint }\r\n      });\r\n\r\n      // Create new position\r\n      let position = await prisma.position.create({\r\n        data: {\r\n          userId: user.id,\r\n          mint,\r\n          qty: D(0),\r\n          costBasis: D(0)\r\n        }\r\n      });\r\n\r\n      // Track lots for FIFO\r\n      interface Lot {\r\n        qtyRemaining: Decimal;\r\n        unitCostUsd: Decimal;\r\n        createdAt: Date;\r\n      }\r\n      const lots: Lot[] = [];\r\n\r\n      let currentQty = D(0);\r\n      let currentCostBasis = D(0);\r\n\r\n      // Replay all trades\r\n      for (const trade of tokenTrades) {\r\n        const qty = trade.quantity as Decimal;\r\n        const priceUsd = trade.price as Decimal;\r\n\r\n        if (trade.side === \"BUY\") {\r\n          // Add to position\r\n          currentQty = currentQty.add(qty);\r\n          const costAdded = qty.mul(priceUsd);\r\n          currentCostBasis = currentCostBasis.add(costAdded);\r\n\r\n          // Create lot\r\n          lots.push({\r\n            qtyRemaining: qty,\r\n            unitCostUsd: priceUsd,\r\n            createdAt: trade.createdAt\r\n          });\r\n\r\n          console",
      "tokens": 0,
      "firstFile": {
        "name": "src\\scripts\\rebuildPositions.ts",
        "start": 51,
        "end": 101,
        "startLoc": {
          "line": 51,
          "column": 4,
          "position": 509
        },
        "endLoc": {
          "line": 101,
          "column": 8,
          "position": 939
        }
      },
      "secondFile": {
        "name": "src\\services\\migrationService.ts",
        "start": 71,
        "end": 121,
        "startLoc": {
          "line": 71,
          "column": 5,
          "position": 652
        },
        "endLoc": {
          "line": 121,
          "column": 7,
          "position": 1082
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "(`     BUY: ${qty.toFixed(4)} @ $${priceUsd.toFixed(6)} = $${costAdded.toFixed(2)}`);\r\n\r\n        } else if (trade.side === \"SELL\") {\r\n          // FIFO consume from lots\r\n          let toSell = qty;\r\n          let totalConsumedCost = D(0);\r\n\r\n          for (let i = 0; i < lots.length && toSell.gt(0); i++) {\r\n            const lot = lots[i];\r\n            if (lot.qtyRemaining.lte(0)) continue;\r\n\r\n            const take = Decimal.min(lot.qtyRemaining, toSell);\r\n            const costConsumed = take.mul(lot.unitCostUsd);\r\n\r\n            lot.qtyRemaining = lot.qtyRemaining.sub(take);\r\n            toSell = toSell.sub(take);\r\n            totalConsumedCost = totalConsumedCost.add(costConsumed);\r\n          }\r\n\r\n          if (toSell.gt(0)) {\r\n            console",
      "tokens": 0,
      "firstFile": {
        "name": "src\\scripts\\rebuildPositions.ts",
        "start": 101,
        "end": 121,
        "startLoc": {
          "line": 101,
          "column": 4,
          "position": 942
        },
        "endLoc": {
          "line": 121,
          "column": 8,
          "position": 1209
        }
      },
      "secondFile": {
        "name": "src\\services\\migrationService.ts",
        "start": 121,
        "end": 141,
        "startLoc": {
          "line": 121,
          "column": 5,
          "position": 1087
        },
        "endLoc": {
          "line": 141,
          "column": 7,
          "position": 1354
        }
      }
    },
    {
      "format": "typescript",
      "lines": 32,
      "fragment": "(`     SELL: ${qty.toFixed(4)} @ $${priceUsd.toFixed(6)}, cost basis reduced by $${totalConsumedCost.toFixed(2)}`);\r\n        }\r\n      }\r\n\r\n      // Update final position\r\n      position = await prisma.position.update({\r\n        where: { id: position.id },\r\n        data: {\r\n          qty: currentQty,\r\n          costBasis: currentCostBasis\r\n        }\r\n      });\r\n\r\n      // Create PositionLot entries for remaining lots\r\n      let lotsCreated = 0;\r\n      for (const lot of lots) {\r\n        if (lot.qtyRemaining.gt(0)) {\r\n          await prisma.positionLot.create({\r\n            data: {\r\n              positionId: position.id,\r\n              userId: user.id,\r\n              mint,\r\n              qtyRemaining: lot.qtyRemaining,\r\n              unitCostUsd: lot.unitCostUsd,\r\n              createdAt: lot.createdAt\r\n            }\r\n          });\r\n          lotsCreated++;\r\n        }\r\n      }\r\n\r\n      console",
      "tokens": 0,
      "firstFile": {
        "name": "src\\scripts\\rebuildPositions.ts",
        "start": 135,
        "end": 166,
        "startLoc": {
          "line": 135,
          "column": 4,
          "position": 1332
        },
        "endLoc": {
          "line": 166,
          "column": 8,
          "position": 1594
        }
      },
      "secondFile": {
        "name": "src\\services\\migrationService.ts",
        "start": 156,
        "end": 187,
        "startLoc": {
          "line": 156,
          "column": 5,
          "position": 1525
        },
        "endLoc": {
          "line": 187,
          "column": 7,
          "position": 1787
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": ",\r\n        data: {\r\n          id: settings.id,\r\n          userId: settings.userId,\r\n          showBuys: settings.showBuys,\r\n          showSells: settings.showSells,\r\n          showFirstBuyOnly: settings.showFirstBuyOnly,\r\n          minMarketCap: settings.minMarketCap ? parseFloat(settings.minMarketCap.toString()) : null,\r\n          maxMarketCap: settings.maxMarketCap ? parseFloat(settings.maxMarketCap.toString()) : null,\r\n          minTransactionUsd: settings.minTransactionUsd ? parseFloat(settings.minTransactionUsd.toString()) : null,\r\n          maxTransactionUsd: settings.maxTransactionUsd ? parseFloat(settings.maxTransactionUsd.toString()) : null,\r\n          requireImages: settings.requireImages,\r\n          createdAt: settings.createdAt,\r\n          updatedAt: settings.updatedAt,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      if (error instanceof z.ZodError) {\r\n        return reply.code(400).send({\r\n          success: false,\r\n          error: 'Invalid request body'",
      "tokens": 0,
      "firstFile": {
        "name": "src\\routes\\walletTrackerSettings.ts",
        "start": 163,
        "end": 183,
        "startLoc": {
          "line": 163,
          "column": 47,
          "position": 1796
        },
        "endLoc": {
          "line": 183,
          "column": 23,
          "position": 2060
        }
      },
      "secondFile": {
        "name": "src\\routes\\walletTrackerSettings.ts",
        "start": 65,
        "end": 85,
        "startLoc": {
          "line": 65,
          "column": 5,
          "position": 601
        },
        "endLoc": {
          "line": 85,
          "column": 29,
          "position": 865
        }
      }
    },
    {
      "format": "typescript",
      "lines": 28,
      "fragment": "}\r\n      });\r\n\r\n      // Enrich with token metadata using batch API\r\n      const uniqueMints = [...new Set(trades.map(t => t.mint))];\r\n      const metadataResults = await getTokenMetaBatch(uniqueMints);\r\n\r\n      const metadataMap = new Map();\r\n      metadataResults.forEach(token => {\r\n        if (token?.address) {\r\n          metadataMap.set(token.address, token);\r\n        }\r\n      });\r\n\r\n      const enriched = trades.map(trade => {\r\n        const meta = metadataMap.get(trade.mint);\r\n        return {\r\n          ...trade,\r\n          symbol: meta?.symbol,\r\n          name: meta?.name,\r\n          logoURI: meta?.logoURI,\r\n        };\r\n      });\r\n\r\n      return { trades: enriched };\r\n    } catch (error: any) {\r\n      app.log.error(error);\r\n      return reply.code(500).send({ error: \"Failed to fetch user trades\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\routes\\trades.ts",
        "start": 65,
        "end": 92,
        "startLoc": {
          "line": 65,
          "column": 2,
          "position": 697
        },
        "endLoc": {
          "line": 92,
          "column": 30,
          "position": 979
        }
      },
      "secondFile": {
        "name": "src\\routes\\trades.ts",
        "start": 24,
        "end": 51,
        "startLoc": {
          "line": 24,
          "column": 9,
          "position": 239
        },
        "endLoc": {
          "line": 51,
          "column": 25,
          "position": 521
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ";\r\n    };\r\n\r\n    // Validation\r\n    if (!userId || !mint || !side || !qty) {\r\n      return reply.code(400).send({\r\n        error: \"Missing required fields: userId, mint, side, qty\"\r\n      });\r\n    }\r\n\r\n    if (![\"BUY\", \"SELL\"].includes(side)) {\r\n      return reply.code(400).send({\r\n        error: \"Invalid side. Must be 'BUY' or 'SELL'\"\r\n      });\r\n    }\r\n\r\n    const qtyNum = parseFloat(qty);\r\n    if (isNaN(qtyNum) || qtyNum <= 0) {\r\n      return reply.code(400).send({\r\n        error: \"Invalid quantity. Must be a positive number\"\r\n      });\r\n    }\r\n\r\n    try {\r\n      // Execute real trade using deposited balance",
      "tokens": 0,
      "firstFile": {
        "name": "src\\routes\\realTrade.ts",
        "start": 28,
        "end": 52,
        "startLoc": {
          "line": 28,
          "column": 7,
          "position": 220
        },
        "endLoc": {
          "line": 52,
          "column": 46,
          "position": 425
        }
      },
      "secondFile": {
        "name": "src\\routes\\trade.ts",
        "start": 14,
        "end": 38,
        "startLoc": {
          "line": 14,
          "column": 7,
          "position": 159
        },
        "endLoc": {
          "line": 38,
          "column": 21,
          "position": 364
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": "});\r\n    }\r\n\r\n    if (![\"BUY\", \"SELL\"].includes(side)) {\r\n      return reply.code(400).send({\r\n        error: \"Invalid side. Must be 'BUY' or 'SELL'\"\r\n      });\r\n    }\r\n\r\n    const qtyNum = parseFloat(qty);\r\n    if (isNaN(qtyNum) || qtyNum <= 0) {\r\n      return reply.code(400).send({\r\n        error: \"Invalid quantity. Must be a positive number\"\r\n      });\r\n    }\r\n\r\n    try {\r\n      // Build unsigned transaction",
      "tokens": 0,
      "firstFile": {
        "name": "src\\routes\\realTrade.ts",
        "start": 131,
        "end": 148,
        "startLoc": {
          "line": 131,
          "column": 7,
          "position": 1218
        },
        "endLoc": {
          "line": 148,
          "column": 30,
          "position": 1360
        }
      },
      "secondFile": {
        "name": "src\\routes\\trade.ts",
        "start": 21,
        "end": 38,
        "startLoc": {
          "line": 21,
          "column": 7,
          "position": 222
        },
        "endLoc": {
          "line": 38,
          "column": 21,
          "position": 364
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "= {\r\n              mint: event.token.mint,\r\n              name: event.token.name,\r\n              symbol: event.token.symbol,\r\n              description: event.token.description,\r\n              imageUrl: event.token.uri,\r\n              twitter: event.token.twitter,\r\n              telegram: event.token.telegram,\r\n              website: event.token.website,\r\n              holderCount: event.token.holderCount,\r\n              marketCapSol: event.token.marketCapSol,\r\n              vSolInBondingCurve: event.token.vSolInBondingCurve,\r\n              vTokensInBondingCurve: event.token.vTokensInBondingCurve,\r\n              timestamp: event.timestamp,\r\n            };\r\n\r\n            reply",
      "tokens": 0,
      "firstFile": {
        "name": "src\\routes\\pumpPortalData.ts",
        "start": 264,
        "end": 280,
        "startLoc": {
          "line": 264,
          "column": 2,
          "position": 2281
        },
        "endLoc": {
          "line": 280,
          "column": 6,
          "position": 2448
        }
      },
      "secondFile": {
        "name": "src\\services\\pumpPortalStreamService.ts",
        "start": 159,
        "end": 175,
        "startLoc": {
          "line": 159,
          "column": 2,
          "position": 1154
        },
        "endLoc": {
          "line": 175,
          "column": 6,
          "position": 1305
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": ",\r\n    {\r\n      preHandler: [authenticateToken],\r\n      schema: {\r\n        params: {\r\n          type: 'object',\r\n          required: ['id'],\r\n          properties: {\r\n            id: { type: 'string', format: 'uuid' },\r\n          },\r\n        },\r\n        response: {\r\n          200: {\r\n            type: 'object',\r\n            required: ['success'],\r\n            properties: {\r\n              success: { type: 'boolean', const: true },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n    async (request: AuthenticatedRequest, reply) => {\r\n      const userId = request.user!.id;\r\n      const { id } = request.params as { id: string };\r\n\r\n      await notificationService.deleteNotification",
      "tokens": 0,
      "firstFile": {
        "name": "src\\routes\\notifications.ts",
        "start": 184,
        "end": 210,
        "startLoc": {
          "line": 184,
          "column": 7,
          "position": 1526
        },
        "endLoc": {
          "line": 210,
          "column": 19,
          "position": 1767
        }
      },
      "secondFile": {
        "name": "src\\routes\\notifications.ts",
        "start": 119,
        "end": 145,
        "startLoc": {
          "line": 119,
          "column": 12,
          "position": 1040
        },
        "endLoc": {
          "line": 145,
          "column": 23,
          "position": 1281
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": ": number; reason: string } }>, reply: FastifyReply) => {\r\n    try {\r\n      const { username, duration, reason } = req.body;\r\n      const moderatorId = (req as any).user.id;\r\n\r\n      // Check permissions\r\n      if (!await checkModeratorPermissions(moderatorId, app.prisma)) {\r\n        return reply.code(403).send({\r\n          success: false,\r\n          error: 'Insufficient permissions'\r\n        });\r\n      }\r\n\r\n      // Find target user\r\n      const targetUser = await findUserByHandle(username, app.prisma);\r\n      if (!targetUser) {\r\n        return reply.code(404).send({\r\n          success: false,\r\n          error: 'User not found'\r\n        });\r\n      }\r\n\r\n      // Check if target user is also moderator/admin\r\n      if (targetUser.userTier === 'ADMINISTRATOR' || targetUser.userTier === 'MODERATOR') {\r\n        return reply.code(403).send({\r\n          success: false,\r\n          error: 'Cannot ban other moderators'",
      "tokens": 0,
      "firstFile": {
        "name": "src\\routes\\moderation.ts",
        "start": 99,
        "end": 125,
        "startLoc": {
          "line": 99,
          "column": 2,
          "position": 942
        },
        "endLoc": {
          "line": 125,
          "column": 30,
          "position": 1223
        }
      },
      "secondFile": {
        "name": "src\\routes\\moderation.ts",
        "start": 34,
        "end": 60,
        "startLoc": {
          "line": 34,
          "column": 9,
          "position": 335
        },
        "endLoc": {
          "line": 60,
          "column": 31,
          "position": 616
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": ", reason } = req.body;\r\n      const moderatorId = (req as any).user.id;\r\n\r\n      // Check permissions\r\n      if (!await checkModeratorPermissions(moderatorId, app.prisma)) {\r\n        return reply.code(403).send({\r\n          success: false,\r\n          error: 'Insufficient permissions'\r\n        });\r\n      }\r\n\r\n      // Find target user\r\n      const targetUser = await findUserByHandle(username, app.prisma);\r\n      if (!targetUser) {\r\n        return reply.code(404).send({\r\n          success: false,\r\n          error: 'User not found'\r\n        });\r\n      }\r\n\r\n      // Execute kick",
      "tokens": 0,
      "firstFile": {
        "name": "src\\routes\\moderation.ts",
        "start": 166,
        "end": 186,
        "startLoc": {
          "line": 166,
          "column": 9,
          "position": 1587
        },
        "endLoc": {
          "line": 186,
          "column": 16,
          "position": 1770
        }
      },
      "secondFile": {
        "name": "src\\routes\\moderation.ts",
        "start": 36,
        "end": 56,
        "startLoc": {
          "line": 36,
          "column": 9,
          "position": 377
        },
        "endLoc": {
          "line": 56,
          "column": 48,
          "position": 560
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": ";\r\n      const moderatorId = (req as any).user.id;\r\n\r\n      // Check permissions\r\n      if (!await checkModeratorPermissions(moderatorId, app.prisma)) {\r\n        return reply.code(403).send({\r\n          success: false,\r\n          error: 'Insufficient permissions'\r\n        });\r\n      }\r\n\r\n      // Find target user\r\n      const targetUser = await findUserByHandle(username, app.prisma);\r\n      if (!targetUser) {\r\n        return reply.code(404).send({\r\n          success: false,\r\n          error: 'User not found'\r\n        });\r\n      }\r\n\r\n      // Get moderation status",
      "tokens": 0,
      "firstFile": {
        "name": "src\\routes\\moderation.ts",
        "start": 300,
        "end": 320,
        "startLoc": {
          "line": 300,
          "column": 2,
          "position": 2871
        },
        "endLoc": {
          "line": 320,
          "column": 25,
          "position": 3043
        }
      },
      "secondFile": {
        "name": "src\\routes\\moderation.ts",
        "start": 36,
        "end": 56,
        "startLoc": {
          "line": 36,
          "column": 5,
          "position": 388
        },
        "endLoc": {
          "line": 56,
          "column": 48,
          "position": 560
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ", {\r\n    preHandler: [authenticateToken]\r\n  }, async (req: FastifyRequest, reply: FastifyReply) => {\r\n    try {\r\n      const { username } = req.params as { username: string };\r\n      const moderatorId = (req as any).user.id;\r\n\r\n      // Check permissions\r\n      if (!await checkModeratorPermissions(moderatorId, app.prisma)) {\r\n        return reply.code(403).send({\r\n          success: false,\r\n          error: 'Insufficient permissions'\r\n        });\r\n      }\r\n\r\n      // Find target user\r\n      const targetUser = await findUserByHandle(username, app.prisma);\r\n      if (!targetUser) {\r\n        return reply.code(404).send({\r\n          success: false,\r\n          error: 'User not found'\r\n        });\r\n      }\r\n\r\n      // Get moderation history",
      "tokens": 0,
      "firstFile": {
        "name": "src\\routes\\moderation.ts",
        "start": 340,
        "end": 364,
        "startLoc": {
          "line": 340,
          "column": 32,
          "position": 3196
        },
        "endLoc": {
          "line": 364,
          "column": 26,
          "position": 3437
        }
      },
      "secondFile": {
        "name": "src\\routes\\moderation.ts",
        "start": 296,
        "end": 56,
        "startLoc": {
          "line": 296,
          "column": 31,
          "position": 2802
        },
        "endLoc": {
          "line": 56,
          "column": 48,
          "position": 560
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "} = req.body;\r\n      const moderatorId = (req as any).user.id;\r\n\r\n      // Check permissions\r\n      if (!await checkModeratorPermissions(moderatorId, app.prisma)) {\r\n        return reply.code(403).send({\r\n          success: false,\r\n          error: 'Insufficient permissions'\r\n        });\r\n      }\r\n\r\n      // Find target user\r\n      const targetUser = await findUserByHandle(username, app.prisma);\r\n      if (!targetUser) {\r\n        return reply.code(404).send({\r\n          success: false,\r\n          error: 'User not found'\r\n        });\r\n      }\r\n\r\n      // Unmute user",
      "tokens": 0,
      "firstFile": {
        "name": "src\\routes\\moderation.ts",
        "start": 394,
        "end": 414,
        "startLoc": {
          "line": 394,
          "column": 2,
          "position": 3718
        },
        "endLoc": {
          "line": 414,
          "column": 15,
          "position": 3897
        }
      },
      "secondFile": {
        "name": "src\\routes\\moderation.ts",
        "start": 36,
        "end": 56,
        "startLoc": {
          "line": 36,
          "column": 2,
          "position": 381
        },
        "endLoc": {
          "line": 56,
          "column": 48,
          "position": 560
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ", {\r\n    preHandler: [authenticateToken]\r\n  }, async (req: FastifyRequest<{ Body: { username: string } }>, reply: FastifyReply) => {\r\n    try {\r\n      const { username } = req.body;\r\n      const moderatorId = (req as any).user.id;\r\n\r\n      // Check permissions\r\n      if (!await checkModeratorPermissions(moderatorId, app.prisma)) {\r\n        return reply.code(403).send({\r\n          success: false,\r\n          error: 'Insufficient permissions'\r\n        });\r\n      }\r\n\r\n      // Find target user\r\n      const targetUser = await findUserByHandle(username, app.prisma);\r\n      if (!targetUser) {\r\n        return reply.code(404).send({\r\n          success: false,\r\n          error: 'User not found'\r\n        });\r\n      }\r\n\r\n      // Unban user",
      "tokens": 0,
      "firstFile": {
        "name": "src\\routes\\moderation.ts",
        "start": 447,
        "end": 471,
        "startLoc": {
          "line": 447,
          "column": 20,
          "position": 4143
        },
        "endLoc": {
          "line": 471,
          "column": 14,
          "position": 4390
        }
      },
      "secondFile": {
        "name": "src\\routes\\moderation.ts",
        "start": 390,
        "end": 56,
        "startLoc": {
          "line": 390,
          "column": 21,
          "position": 3650
        },
        "endLoc": {
          "line": 56,
          "column": 48,
          "position": 560
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": ");\r\n}\r\n\r\n// Helper function to get time ago string\r\nfunction getTimeAgo(timestamp: Date): string {\r\n  const now = new Date();\r\n  const diff = now.getTime() - timestamp.getTime();\r\n  const seconds = Math.floor(diff / 1000);\r\n  const minutes = Math.floor(seconds / 60);\r\n  const hours = Math.floor(minutes / 60);\r\n  const days = Math.floor(hours / 24);\r\n\r\n  if (days > 0) return `${days}d`;\r\n  if (hours > 0) return `${hours}h`;\r\n  if (minutes > 0) return `${minutes}m`;\r\n  return `${seconds}s`;\r\n}\r\n\r\n// Clean up on shutdown",
      "tokens": 0,
      "firstFile": {
        "name": "src\\plugins\\wsWalletTracker.ts",
        "start": 284,
        "end": 302,
        "startLoc": {
          "line": 284,
          "column": 2,
          "position": 2646
        },
        "endLoc": {
          "line": 302,
          "column": 24,
          "position": 2873
        }
      },
      "secondFile": {
        "name": "src\\routes\\walletTrackerV2.ts",
        "start": 356,
        "end": 374,
        "startLoc": {
          "line": 356,
          "column": 2,
          "position": 3558
        },
        "endLoc": {
          "line": 374,
          "column": 46,
          "position": 3785
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": ");\r\n\r\n      const statusCode = result.status === 'healthy' ? 200 :\r\n                        result.status === 'degraded' ? 200 : 503;\r\n\r\n      return reply.code(statusCode).send(result);\r\n    } catch (error) {\r\n      return reply.code(503).send({\r\n        status: 'unhealthy',\r\n        timestamp: new Date().toISOString(),\r\n        error: 'Health check failed'\r\n      });\r\n    }\r\n  });\r\n\r\n  // Liveness probe for Kubernetes/Docker",
      "tokens": 0,
      "firstFile": {
        "name": "src\\plugins\\health.ts",
        "start": 255,
        "end": 270,
        "startLoc": {
          "line": 255,
          "column": 5,
          "position": 2384
        },
        "endLoc": {
          "line": 270,
          "column": 40,
          "position": 2527
        }
      },
      "secondFile": {
        "name": "src\\plugins\\health.ts",
        "start": 236,
        "end": 251,
        "startLoc": {
          "line": 236,
          "column": 6,
          "position": 2194
        },
        "endLoc": {
          "line": 251,
          "column": 46,
          "position": 2337
        }
      }
    }
  ]
}