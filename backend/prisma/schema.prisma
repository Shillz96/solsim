datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String   @id @default(uuid())
  email              String   @unique
  username           String
  passwordHash       String
  
  // Profile information
  displayName        String?
  bio                String?
  avatar             String?
  avatarUrl          String?  // For uploaded avatars
  
  // Social media links
  twitter            String?
  discord            String?
  telegram           String?
  website            String?
  
  // Trading preferences
  virtualSolBalance  Decimal  @default("100")  // Virtual SOL balance (in SOL units, not USD)
  isProfilePublic    Boolean  @default(true)
  
  // Creator rewards
  solanaWallet       String?  // Solana wallet for creator rewards (backend only)
  
  // Timestamps
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Relations
  trades             Trade[]
  holdings           Holding[]
  transactions       TransactionHistory[]
}

model Trade {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  tokenAddress  String
  tokenSymbol   String?
  tokenName     String?
  action        String   // 'buy' or 'sell'
  quantity      Decimal  // Number of tokens traded
  price         Decimal  // Price per token in USD (from DexScreener/external API)
  totalCost     Decimal  // Total cost in SOL (amount of SOL spent/received)
  realizedPnL   Decimal? // Realized profit/loss in SOL (for sell trades only)
  marketCapUsd  Decimal? // Market cap in USD at time of trade (for market cap analysis)
  timestamp     DateTime @default(now())
  
  // Relations
  transactions  TransactionHistory[]
  
  // Optimized indexes for common query patterns
  @@index([userId, timestamp(sort: Desc)], name: "user_trades_recent")
  @@index([tokenAddress, timestamp(sort: Desc)], name: "token_trades_recent")
  @@index([userId, tokenAddress, timestamp(sort: Desc)], name: "user_token_history")
  @@index([userId, action, timestamp(sort: Desc)], name: "user_trade_type")
  @@index([timestamp(sort: Desc)], name: "trades_chronological")
}

model Holding {
  id              String  @id @default(uuid())
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  tokenAddress    String
  tokenSymbol     String?
  tokenName       String?
  tokenImageUrl   String?
  entryPrice      Decimal  // Entry price in USD per token (legacy format - calculated from USD price at purchase)
  quantity        Decimal  @default("0") // Number of tokens held
  avgBuyMarketCap Decimal? // Weighted average market cap at which user bought tokens (in USD)
  updatedAt       DateTime @updatedAt
  
  // Optimized indexes for common query patterns
  @@unique([userId, tokenAddress], name: "user_token_position")
  @@index([userId, quantity(sort: Desc)], name: "user_holdings_by_size")
  @@index([tokenAddress, quantity(sort: Desc)], name: "token_holders_by_size")
  @@index([userId, updatedAt(sort: Desc)], name: "user_recent_holdings")
}

// Transaction History for FIFO cost basis tracking
model TransactionHistory {
  id                String   @id @default(uuid())
  userId            String
  tokenAddress      String
  tokenSymbol       String?
  tokenName         String?
  
  // Transaction details
  action            String   // 'BUY', 'SELL', 'MIGRATED' (for initial holdings)
  quantity          Decimal  // Number of tokens in this transaction
  pricePerTokenSol  Decimal  // Price per token in SOL (not USD)
  totalCostSol      Decimal  // Total cost in SOL
  feesSol           Decimal  @default("0") // Transaction fees in SOL
  
  // FIFO tracking
  remainingQuantity Decimal  // For BUY transactions: amount not yet sold (for FIFO)
  costBasisSol      Decimal  // For BUY: total SOL invested; For SELL: SOL received
  realizedPnLSol    Decimal? // For SELL: realized profit/loss in SOL
  
  // Reference to original trade (if applicable)
  tradeId           String?
  trade             Trade?   @relation(fields: [tradeId], references: [id], onDelete: SetNull)
  
  // Timestamps
  executedAt        DateTime @default(now())
  createdAt         DateTime @default(now())
  
  // User relation
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes for efficient FIFO queries
  @@index([userId, tokenAddress, executedAt], name: "user_token_fifo")
  @@index([userId, executedAt(sort: Desc)], name: "user_transactions_recent")
  @@index([tokenAddress, executedAt(sort: Desc)], name: "token_transactions")
  @@index([action, executedAt(sort: Desc)], name: "transaction_type")
  @@index([remainingQuantity], name: "available_lots")
}

model Token {
  address         String    @id
  symbol          String?
  name            String?
  imageUrl        String?
  lastPrice       Decimal?  // Last known price in USD per token
  lastTs          DateTime?
  
  // Short-term metrics for DexScreener-style trending (all in USD)
  volume5m        Decimal?  @default("0")  // Trading volume in USD
  volume1h        Decimal?  @default("0")  // Trading volume in USD
  volume24h       Decimal?  @default("0")  // Trading volume in USD
  priceChange5m   Decimal?  @default("0")  // Price change percentage
  priceChange1h   Decimal?  @default("0")  // Price change percentage
  priceChange24h  Decimal?  @default("0")  // Price change percentage
  liquidityUsd    Decimal?  @default("0")  // Liquidity in USD
  marketCapUsd    Decimal?  @default("0")  // Market cap in USD
  holderCount     BigInt?   @default(0)    // Number of token holders
  
  // Discovery and trending flags
  isNew           Boolean   @default(false)
  isTrending      Boolean   @default(false)
  momentumScore   Decimal?  @default("0")
  
  // Social and metadata (JSON strings for SQLite compatibility)
  websites        String?   @default("[]")
  socials         String?   @default("[]")
  
  // Timestamps for tracking
  firstSeenAt     DateTime? @default(now())
  lastUpdatedAt   DateTime? @default(now())
  
  @@index([lastTs])
  @@index([isTrending, momentumScore])
  @@index([symbol])
  @@index([isNew])
}